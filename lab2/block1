{
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5-final"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3.8.5 64-bit",
   "metadata": {
    "interpreter": {
     "hash": "916dbcbb3f70747c44a77c7bcd40155683ae19c65e1c03b4aa3499c5328201f1"
    }
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2,
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import types\n",
    "import inspect\n",
    "import importlib\n",
    "import builtins\n",
    "import sys\n",
    "import json"
   ]
  },
  {
   "source": [
    "def get_closure_globs(code_obj, globs):\n",
    "    if isinstance(code_obj, types.CodeType):\n",
    "        for var in code_obj.co_consts:\n",
    "            get_closure_globs(var, globs)\n",
    "            mod = importlib.import_module(__name__)\n",
    "        for name in code_obj.co_names:\n",
    "            if name in dir(mod):\n",
    "                    globs[name] = getattr(mod, name)\n",
    "            elif name in dir(builtins):\n",
    "                globs[name] = getattr(builtins, name)\n",
    "\n",
    "def get_codeobject_attrs(obj):\n",
    "    if isinstance(obj, types.CodeType):\n",
    "        obj_dict = {}\n",
    "        for key in dir(obj):\n",
    "            if key.startswith('co_'):\n",
    "                value = obj.__getattribute__(key)\n",
    "                obj_dict[key] = value\n",
    "        return obj_dict\n",
    "\n",
    "def unpack_codeobject(obj_dict):\n",
    "    code_obj = types.CodeType(obj_dict['co_argcount'],\n",
    "                      obj_dict['co_posonlyargcount'],\n",
    "                      obj_dict['co_kwonlyargcount'],\n",
    "                      obj_dict['co_nlocals'],\n",
    "                      obj_dict['co_stacksize'],\n",
    "                      obj_dict['co_flags'],\n",
    "                      obj_dict['co_code'],\n",
    "                      obj_dict['co_consts'],\n",
    "                      obj_dict['co_names'],\n",
    "                      obj_dict['co_varnames'],\n",
    "                      obj_dict['co_filename'],\n",
    "                      obj_dict['co_name'],\n",
    "                      obj_dict['co_firstlineno'],\n",
    "                      obj_dict['co_lnotab'],\n",
    "                      obj_dict['co_freevars'],\n",
    "                      obj_dict['co_cellvars']\n",
    "                      )\n",
    "    return code_obj\n",
    "\n",
    "def pack_function(obj):\n",
    "    obj_dict = {}\n",
    "    attrs = {}\n",
    "    attrs['__name__'] = obj.__qualname__\n",
    "    attrs['__defaults__'] = obj.__defaults__\n",
    "    attrs['__closure__'] = obj.__closure__  \n",
    "    attrs['__code__'] = obj.__code__\n",
    "    global_ns = {}\n",
    "    get_closure_globs(obj.__code__, global_ns)\n",
    "    obj_dict['__globals__'] = global_ns\n",
    "    obj_dict['attributes'] = attrs\n",
    "    return obj_dict\n",
    "\n",
    "def unpack_function(obj_dict):\n",
    "    attrs = obj_dict['attributes']\n",
    "    obj = types.FunctionType(code=attrs['__code__'],\n",
    "                             globals=obj_dict['__globals__'],\n",
    "                             name=attrs['__name__'],\n",
    "                             argdefs=attrs['__defaults__'],\n",
    "                             closure=attrs['__closure__'])\n",
    "    # obj.__module__ = obj_dict['module']\n",
    "    return obj\n",
    "\n",
    "def pack_builtinsfunc(obj):\n",
    "    obj_dict = {}\n",
    "    obj_dict['type'] = 'builtinfunction'\n",
    "    obj_dict['module'] = obj.__module__\n",
    "    obj_dict['attributes'] = {'__name__' : obj.__name__}\n",
    "    return obj_dict\n",
    "    \n",
    "def unpack_builtinsfunc(obj_dict):\n",
    "    module = importlib.import_module(obj_dict['module'])\n",
    "    obj = getattr(module, obj_dict['attributes']['__name__'])\n",
    "    return obj\n",
    "\n",
    "def pack(obj):\n",
    "    obj_dict = {}\n",
    "    if type(obj) in (int, float, str, bool):\n",
    "        if type(obj) == int:\n",
    "            obj_dict['type'] = 'int'\n",
    "            obj_dict['data'] = obj\n",
    "            return obj_dict\n",
    "        elif type(obj) == float:\n",
    "            obj_dict['type'] = 'float'\n",
    "            obj_dict['data'] = obj\n",
    "            return obj_dict\n",
    "        elif type(obj) == bool:\n",
    "            obj_dict['type'] = 'bool'\n",
    "            obj_dict['data'] = obj\n",
    "            return obj_dict\n",
    "        elif type(obj) == str:\n",
    "            obj_dict['type'] = 'str'\n",
    "            obj_dict['data'] = obj\n",
    "            return obj_dict\n",
    "\n",
    "    if type(obj) in (dict, list, tuple, set, frozenset):\n",
    "        if isinstance(obj, dict):\n",
    "            obj_dict['type'] = 'dict'\n",
    "            obj_dict['data'] = {key : pack(val) for key, val in obj.items()}\n",
    "            return obj_dict\n",
    "        if isinstance(obj, list):\n",
    "            obj_dict['type'] = 'list'\n",
    "            obj_dict['data'] = [pack(el) for el in obj]\n",
    "            return obj_dict\n",
    "        if isinstance(obj, tuple):\n",
    "            obj_dict['type'] = 'tuple'\n",
    "            obj_dict['data'] = [pack(el) for el in obj]\n",
    "            return obj_dict\n",
    "        if isinstance(obj, list):\n",
    "            obj_dict['type'] = 'set'\n",
    "            obj_dict['data'] = [pack(el) for el in obj]\n",
    "            return obj_dict\n",
    "        if isinstance(obj, list):\n",
    "            obj_dict['type'] = 'frozenset'\n",
    "            obj_dict['data'] = [pack(el) for el in obj]\n",
    "            return obj_dict\n",
    "\n",
    "    if isinstance(obj, bytes):\n",
    "        obj_dict['type'] = 'bytes'\n",
    "        obj_dict['data'] = [byte for byte in obj]\n",
    "        return obj_dict\n",
    "\n",
    "    if isinstance(obj, bytearray):\n",
    "        obj_dict['type'] = 'bytearray'\n",
    "        obj_dict['data'] = [byte for byte in obj]\n",
    "        return obj_dict\n",
    "\n",
    "    if isinstance(obj, types.CodeType):\n",
    "        obj_dict['type'] = 'codeobject'\n",
    "        obj_dict['data'] = pack(get_codeobject_attrs(obj))\n",
    "        return obj_dict\n",
    "    \n",
    "    if isinstance(obj, types.FunctionType):\n",
    "        obj_dict['type'] = 'function'\n",
    "        obj_dict['data'] = pack(pack_function(obj))\n",
    "        return obj_dict\n",
    "\n",
    "    if isinstance(obj, types.BuiltinFunctionType):\n",
    "        obj_dict['type'] = 'builtinfunction'\n",
    "        obj_dict['data'] = pack(pack_builtinsfunc(obj))\n",
    "        return obj_dict\n",
    "\n",
    "    if isinstance(obj, types.CellType):\n",
    "        obj_dict['type'] = 'celltype'\n",
    "        obj_dict['data'] = pack(obj.cell_contents)\n",
    "        return obj_dict\n",
    "\n",
    "def unpack(obj_dict):\n",
    "    obj = object\n",
    "    try:\n",
    "        t = obj_dict['type']\n",
    "    except:\n",
    "        KeyError\n",
    "        return\n",
    "\n",
    "    if t in ('int', 'float', 'bool', 'str'):\n",
    "        if t == 'int':\n",
    "            return int(obj_dict['data'])\n",
    "        if t == 'float':\n",
    "            return float(obj_dict['data'])\n",
    "        if t == 'bool':\n",
    "            return bool(obj_dict['data'])\n",
    "        if t == 'str':\n",
    "            return str(obj_dict['data'])    #excess\n",
    "        \n",
    "    if t in ('dict', 'list', 'tuple', 'set', 'frozenset'):\n",
    "        if t == 'dict':\n",
    "            tmp = {key : unpack(val) for key, val in obj_dict['data'].items()}\n",
    "            if 'type' in tmp.keys():\n",
    "                if 'data' in tmp.keys():\n",
    "                    return unpack(tmp['data'])\n",
    "            return tmp\n",
    "        if t == 'list':\n",
    "            return [unpack(el) for el in obj_dict['data']]\n",
    "        if t == 'tuple':\n",
    "            o = [unpack(el) for el in obj_dict['data']]\n",
    "            return tuple(o)\n",
    "        if t == 'set':\n",
    "            o = [unpack(el) for el in obj_dict['data']]\n",
    "            return set(o)\n",
    "        if t == 'frozenset':\n",
    "            o = [unpack(el) for el in obj_dict['data']]\n",
    "            return frozenset(o)\n",
    "\n",
    "    if t == 'bytes':\n",
    "        return bytes(obj_dict['data'])\n",
    "\n",
    "    if t == 'codeobject':\n",
    "        obj = unpack_codeobject(unpack(obj_dict['data']))\n",
    "        return obj\n",
    "\n",
    "    if t == 'function':\n",
    "        obj = unpack_function(unpack(obj_dict['data']))\n",
    "        return obj\n",
    "\n",
    "    if t == 'builtinfunction':\n",
    "        obj = unpack_builtinsfunc(unpack(obj_dict['data']))\n",
    "        return obj\n",
    "\n",
    "    if t == 'celltype':\n",
    "        obj = types.CellType()\n",
    "        obj.cell_contents = unpack(obj_dict['data'])\n",
    "        return obj"
   ],
   "cell_type": "code",
   "metadata": {},
   "execution_count": 1,
   "outputs": []
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "in metaclass __new__ method\nin metaclass __init__ method\n"
     ]
    }
   ],
   "source": [
    "class MyMeta(type):\n",
    "    def __new__(cls, classname, supers, dict):\n",
    "        print(\"in metaclass __new__ method\")\n",
    "        return type.__new__(cls, classname, supers, dict)\n",
    "    def __init__(cls, classname, supers, dict):\n",
    "        print(\"in metaclass __init__ method\")\n",
    "\n",
    "def dec(func):\n",
    "    def wrap(*args, **kwargs):\n",
    "        print(\"in\", func.__name__)\n",
    "        return func(*args, **kwargs)\n",
    "    return wrap\n",
    "\n",
    "class Example(metaclass=MyMeta):\n",
    "    data = 1\n",
    "    self_dict = {}\n",
    "    def __init__(self):\n",
    "        self.b = 3\n",
    "    def f(self, name):\n",
    "        print(\"fuck off\", name)\n",
    "    @staticmethod\n",
    "    def hi(self): pass\n",
    "    @classmethod\n",
    "    def clf(self):pass\n",
    "    def decf(self):pass\n",
    "    decf = dec(decf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "def unpack_type(obj):\n",
    "    obj_dict = {}\n",
    "types."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "{'__module__': '__main__', 'data': 1, 'self_dict': {}, '__init__': <function Example.__init__ at 0x7f3b9c21d3a0>, 'f': <function Example.f at 0x7f3b9c21d430>, 'hi': <staticmethod object at 0x7f3b9c239040>, 'clf': <classmethod object at 0x7f3b9c2397f0>, 'decf': <function dec.<locals>.wrap at 0x7f3b9c21d670>, '__dict__': <attribute '__dict__' of 'Example' objects>, '__weakref__': <attribute '__weakref__' of 'Example' objects>, '__doc__': None}\n"
     ]
    }
   ],
   "source": [
    "print({key : value for key, value in Example.__dict__.items() if not inspect.isroutine(key)})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}